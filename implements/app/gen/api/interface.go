// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// URL defines model for URL.
type URL = string

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	Location URL `json:"location"`
}

// VerifyAuthParams defines parameters for VerifyAuth.
type VerifyAuthParams struct {
	Code string `form:"code" json:"code"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /auth)
	DeleteAuth(ctx echo.Context) error

	// (GET /auth)
	Auth(ctx echo.Context) error

	// (GET /auth/verify)
	VerifyAuth(ctx echo.Context, params VerifyAuthParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteAuth converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAuth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAuth(ctx)
	return err
}

// Auth converts echo context to params.
func (w *ServerInterfaceWrapper) Auth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Auth(ctx)
	return err
}

// VerifyAuth converts echo context to params.
func (w *ServerInterfaceWrapper) VerifyAuth(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyAuthParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VerifyAuth(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/auth", wrapper.DeleteAuth)
	router.GET(baseURL+"/auth", wrapper.Auth)
	router.GET(baseURL+"/auth/verify", wrapper.VerifyAuth)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xTX2vUThT9Kj9u+wOlcZN2xYeAlIIvBR+koC+dFcbsbZOym5nOTKpliTRJK9VaKoIW",
	"+9KiPsgiFsGHKsUvM6TWbyEzSdut/YOgbzc3d849995zehCwLmcxxkqC3wOBkrNYov2YSFQ4VSfMd8Bi",
	"hbEyIeW8EwVURSx25ySLTU4GIXapibhgHIWKKpgOqwpNPCxwBnwYck/autU76d6dug1p6oDA+SQS2AZ/",
	"+uRtywG1yBF8YA/mMFCQmtI2ykBEvEKHcuN1+X1TZ5s62z7srx9+2D8oVsqdzxa17mJImEZ+D/AR7fKO",
	"gQyV4tJ3XdOtEzKpwAFOlUJhYO/b3+O+604T8tD1/x8iZJgknjd2g5BxQq4QcvUxIY2bhIwQcq01MgzH",
	"ZKUSUTxbkY3iGXa0RhrYNca0a6poEiom4MxAMpb/UR41DF6kLFWTmrgzCQ4soJBV2WjDa3jmNeMYUx6B",
	"D02bslOEdmaXJio0QRs7qLCKBntVC9P5yx87Xw7eLevsjc7X9FIOFlbYK0y2wYdbFsBoA5zTehnzvLO4",
	"FdzB6ovy2baBSx247jXP7V9u7Nrj9XW2bEtTBxSdlUYIln4rdWAW1YXkL+R8CdvzFHlc556ywN9RT53q",
	"CO4Cimhm0cBcMkv5ZKX89NWc4+23w/768Wg/l7bKvT2d7dYjF1u62Nf5ns7WdP5UF31dLOn8vS4+6nxX",
	"F6s6e6Xz5xes5Z5lUi+HU0G7qFAY0j2IDJf5BMUiOEc6DVgbYdCgSiToDBj/d9W3/kQhtVX/kUKs11Es",
	"HM1xGsM6HBxIRKf2/aDt/dHmWNM1DjLMa+ABl6oQ0lb6KwAA///oQCwpNAUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
